@using Microsoft.Extensions.Logging
@using AWOMS.Zernest.Components.Horses.GetFullHorseDetails
@using AWOMS.Zernest.Components.Extensions;
@implements IDisposable
@inject ILogger<FullHorseDetailsComponent> Logger
@inject PersistentComponentState ApplicationState
@inject AWOMS.Zernest.Components.Horses.GetFullHorseDetails.GetFullHorseDetailsCommandHandler GetFullHorseDetailsCommandHandler

@if (@Horse == null)
{
  <PageTitle>Loading...</PageTitle>
  <h3>Loading...</h3>
}
else
{

<PageTitle>@Horse.HashInfo.Name</PageTitle>

<div class="container">
  <div class="main-body">

    <div class="row gutters-sm">
      <div class="col-md-4 mb-3">
        <div class="card">
          <div class="card-body">
            <div class="d-flex flex-column align-items-center text-center">
              <img src="@Horse.ImgUrl" alt="@Horse.HashInfo.Name" class="rounded-circle" width="150">
              <div class="mt-3">
                <h4>@Horse.HashInfo.Name</h4>
                <p class="text-secondary mb-1">@Horse.Genotype @Horse.Bloodline @char.ToUpper(Horse.BreedType[0]).ToString()@Horse.BreedType.Substring(1) @Horse.Gender (@Horse.Rating @Horse.Class.ToRoman())</p>
                <p class="text-muted font-size-sm">@Horse.HashInfo.Color</p>
              </div>
            </div>
          </div>
        </div>
        <div class="card mt-3">
          <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
              <h6 class="mb-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-diagram-3"
                  viewBox="0 0 16 16">
                  <path fill-rule="evenodd"
                    d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H14a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 2 7h5.5V6A1.5 1.5 0 0 1 6 4.5v-1zM8.5 5a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1zM0 11.5A1.5 1.5 0 0 1 1.5 10h1A1.5 1.5 0 0 1 4 11.5v1A1.5 1.5 0 0 1 2.5 14h-1A1.5 1.5 0 0 1 0 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm4.5.5A1.5 1.5 0 0 1 7.5 10h1a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1zm4.5.5a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5v-1zm1.5-.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5h-1z" />
                </svg>
                Stable</h6>
              <span class="text-secondary">@Horse.OwnerStable</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
              <h6 class="mb-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-postage-fill" viewBox="0 0 16 16">
                  <path d="M4.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-7Z"/>
                  <path d="M3.5 1a1 1 0 0 0 1-1h1a1 1 0 0 0 2 0h1a1 1 0 0 0 2 0h1a1 1 0 1 0 2 0H15v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1a1 1 0 1 0 0 2v1h-1.5a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0h-1a1 1 0 1 0-2 0H1v-1a1 1 0 1 0 0-2v-1a1 1 0 1 0 0-2V9a1 1 0 1 0 0-2V6a1 1 0 0 0 0-2V3a1 1 0 0 0 0-2V0h1.5a1 1 0 0 0 1 1ZM3 3v10a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1Z"/>
                </svg>
                Stable Address</h6>
              <span class="text-secondary">@Horse.Owner</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
              <h6 class="mb-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tag-fill" viewBox="0 0 16 16">
                  <path d="M2 1a1 1 0 0 0-1 1v4.586a1 1 0 0 0 .293.707l7 7a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7-7A1 1 0 0 0 6.586 1H2zm4 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                </svg>
                Horse ID</h6>
              <span class="text-secondary">@Horse.HorseId</span>
            </li>

            @if (Horse.IsTrialHorse)
            {
              <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                <h6 class="mb-0">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
                    <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"/>
                  </svg>Trial Horse</h6>
                <span class="text-secondary">Yes</span>
              </li>
            }

            <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
              <h6 class="mb-0">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trophy-fill" viewBox="0 0 16 16">
                  <path d="M2.5.5A.5.5 0 0 1 3 0h10a.5.5 0 0 1 .5.5c0 .538-.012 1.05-.034 1.536a3 3 0 1 1-1.133 5.89c-.79 1.865-1.878 2.777-2.833 3.011v2.173l1.425.356c.194.048.377.135.537.255L13.3 15.1a.5.5 0 0 1-.3.9H3a.5.5 0 0 1-.3-.9l1.838-1.379c.16-.12.343-.207.537-.255L6.5 13.11v-2.173c-.955-.234-2.043-1.146-2.833-3.012a3 3 0 1 1-1.132-5.89A33.076 33.076 0 0 1 2.5.5zm.099 2.54a2 2 0 0 0 .72 3.935c-.333-1.05-.588-2.346-.72-3.935zm10.083 3.935a2 2 0 0 0 .72-3.935c-.133 1.59-.388 2.885-.72 3.935z"/>
                </svg>
                Career Podium</h6>
              <span class="text-secondary">
                <ul>
                  <li># Races: @Horse.NumberOfRaces</li>
                  <li>Win Rate: @Horse.WinRate%</li>
                  <li>Place Rate: @Horse.PlacePct%</li>
                </ul>
                <ChartComponent Id="horse-career-chart"
                                Type="@Applications.UI.Server.Shared.Components.ChartComponent.ChartType.Doughnut"
                                Data="@CareerPodiumChartData"
                                BackgroundColor="@CareerPodiumChartBackgroundColor"
                                Labels="@CareerPodiumChartLabels"
                                DatasetLabel="Career Podium" />
              </span>
            </li>
          </ul>
        </div>
      </div>
      <div class="col-md-8">
        <div class="card mb-3">
          <div class="card-body">

            <div class="row">
              <div class="col">
                <ChartComponent Id="horse-career-chart2"
                                Type="@Applications.UI.Server.Shared.Components.ChartComponent.ChartType.Bar"
                                Data="@CareerPlacementChartData"
                                BackgroundColor="@CareerPlacementChartBackgroundColor"
                                Labels="@CareerPlacementChartLabels"
                                DatasetLabel="Career Placement" />
              </div>
            </div>

          </div>
        </div>

        @* <div class="row gutters-sm">


          <div class="col-sm-6 mb-3">
            <div class="card h-100">
              <div class="card-body">
                <h6 class="d-flex align-items-center mb-3"><i
                    class="material-icons text-info mr-2">assignment</i>Project Status</h6>
                <small>Web Design</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 80%" aria-valuenow="80"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Website Markup</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 72%" aria-valuenow="72"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>One Page</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 89%" aria-valuenow="89"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Mobile Template</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 55%" aria-valuenow="55"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Backend API</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 66%" aria-valuenow="66"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
              </div>
            </div>
          </div>


          <div class="col-sm-6 mb-3">
            <div class="card h-100">
              <div class="card-body">
                <h6 class="d-flex align-items-center mb-3"><i
                    class="material-icons text-info mr-2">assignment</i>Project Status</h6>
                <small>Web Design</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 80%" aria-valuenow="80"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Website Markup</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 72%" aria-valuenow="72"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>One Page</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 89%" aria-valuenow="89"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Mobile Template</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 55%" aria-valuenow="55"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small>Backend API</small>
                <div class="progress mb-3" style="height: 5px">
                  <div class="progress-bar bg-primary" role="progressbar" style="width: 66%" aria-valuenow="66"
                    aria-valuemin="0" aria-valuemax="100"></div>
                </div>
              </div>
            </div>
          </div>


        </div> *@



      </div>
    </div>

  </div>
</div>

}

@code {

  private PersistingComponentStateSubscription persistingSubscription;

  [Parameter]
  public string? HorseId { get;set;}

  public AWOMS.Zernest.Components.Horses.GetFullHorseDetails.FullHorseDetails? Horse { get; set; } = null;

  public string[] CareerPodiumChartData { get; set; }
  public string[] CareerPodiumChartBackgroundColor { get; set; }
  public string[] CareerPodiumChartLabels { get; set; }

  public string[] CareerPlacementChartData { get; set; }
  public string[] CareerPlacementChartBackgroundColor { get; set; }
  public string[] CareerPlacementChartLabels { get; set; }


  //register callback to persist application state data when time comes
  protected override void OnInitialized()//Async()
  {
      Logger.LogDebug($"OnInitializedAsync");
      persistingSubscription = 
          ApplicationState.RegisterOnPersisting(PersistFullHorseDetails);
  }

    //private IJSObjectReference module;

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("OnAfterRenderAsync invoking import js: ./Shared/Components/ChartComponent.razor.js");
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/Components/ChartComponent.razor.js");
        }
    } *@


    //params are captured in url for initial list of horses
    //if click on single horse, it changes the params, thus triggers this to load again
    //which is why this is here instead of this being in the Init
    // https://docs.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0
    protected override async Task OnParametersSetAsync()
    {
        Logger.LogDebug($"OnParametersSetAsync HorseId: {HorseId}");
        await GetFullHorseDetails(HorseId);
    }

    public async Task GetFullHorseDetails(string horseId)
    {
        //@TODO add ids to key? doesnt seem to have conflict problem
        if (!ApplicationState.TryTakeFromJson<FullHorseDetails>(
            "fullhorsedetails", out var restored))
        {
            Logger.LogDebug($"GetFullHorseDetails: Getting fresh for {horseId}");
            var dto = new GetFullHorseDetailsInputDTO
            {
                HorseId = horseId
            };
            var cmd = new GetFullHorseDetailsCommand(dto);
            Horse = await GetFullHorseDetailsCommandHandler.Handle(cmd, new CancellationToken());
            Logger.LogDebug($"Displaying horses for {horseId}");
        }
        else
        {
            Logger.LogDebug("GetFullHorseDetails: Re-using application state cache");
            Horse = restored!;
        }

        PrepareCareerPodiumChart();
        PrepareCareerPlaceChart();

    }

    private void PrepareCareerPodiumChart()
    {

        CareerPodiumChartData = new[]
        {
          Horse.Career.First.ToString(),
          Horse.Career.Second.ToString(),
          Horse.Career.Third.ToString(),
          (Horse.NumberOfRaces - (Horse.Career.First + Horse.Career.Second + Horse.Career.Third)).ToString()
        };

        CareerPodiumChartBackgroundColor = new[] { "#FFD700","#d7d7d7","#ad8a56","#000000" };

        CareerPodiumChartLabels = new[] {
          $"First {Horse.Career.First.ToString()}/{Horse.NumberOfRaces} ({Horse.FirstWinPct}%)",
          $"Second {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Third {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)",
          $"Non-Place {Horse.NumberOfNonPlaces}/{Horse.NumberOfRaces} ({Horse.NonPlacePct}%)" };
    }

    private void PrepareCareerPlaceChart()
    {

        CareerPlacementChartData = new[]
        {
          Horse.Career.First.ToString(),
          Horse.Career.Second.ToString(),
          Horse.Career.Third.ToString()
          @* Horse.Career.First.ToString(),
          Horse.Career.Second.ToString(),
          Horse.Career.Third.ToString(),
          Horse.Career.First.ToString(),
          Horse.Career.Second.ToString(),
          Horse.Career.Third.ToString(),
          Horse.Career.First.ToString(),
          Horse.Career.Second.ToString(),
          (Horse.NumberOfRaces - (Horse.Career.First + Horse.Career.Second + Horse.Career.Third)).ToString() *@
        };

        @* CareerPlacementChartBackgroundColor = new[] { "#d7d7d7" }; *@
        
        CareerPlacementChartBackgroundColor = new[] { "#FFD700","#d7d7d7","#ad8a56" };

        CareerPlacementChartLabels = new[] {
          $"First {Horse.Career.First.ToString()}/{Horse.NumberOfRaces} ({Horse.FirstWinPct}%)",
          $"Second {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Third {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)"};
          @* $"Fourth {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Fifth {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)",
          $"Sixth {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Seventh {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)",
          $"Eighth {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Nineth {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)",
          $"Tenth {Horse.Career.Second.ToString()}/{Horse.NumberOfRaces} ({Horse.SecondWinPct}%)",
          $"Eleventh {Horse.Career.Third.ToString()}/{Horse.NumberOfRaces} ({Horse.ThirdWinPct}%)",
          $"Twelfth {Horse.NumberOfNonPlaces}/{Horse.NumberOfRaces} ({Horse.NonPlacePct}%)" }; *@
    }

    

    private Task PersistFullHorseDetails()
    {
        Logger.LogDebug($"PersistFullHorseDetails fullhorsedetails");
        ApplicationState.PersistAsJson("fullhorsedetails", Horse);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        Logger.LogDebug("Dispose");
        persistingSubscription.Dispose();
    }
}